
"""traffic predict withh AI

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Ffjb0kRtABlP

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from sklearn.ensemble import RandomForestClassifier
from sklearn.metrics import classification_report, confusion_matrix

from sklearn.preprocessing import LabelEncoder

import gradio as gr

pip install gradio

df = pd.read_excel('/content/Book1.xlsx')

print("Data loaded. Shape:", df.shape)

df.info()

df.describe()

df.isnull().sum()

df = df.drop(columns=['ID', 'Source', 'End_Lat', 'End_Lng'], errors='ignore')

df['Distance(mi)'].fillna(df['Distance(mi)'].median(), inplace=True)
df = df.dropna()

df['Start_Time'] = pd.to_datetime(df['Start_Time'], format='mixed', errors='coerce')
df['End_Time'] = pd.to_datetime(df['End_Time'], format='mixed', errors='coerce')

# Remove rows where conversion failed
df = df.dropna(subset=['Start_Time', 'End_Time'])

# Calculate Duration in minutes
df['Duration'] = (df['End_Time'] - df['Start_Time']).dt.total_seconds() / 60

df['Hour'] = df['Start_Time'].dt.hour
df['Weekday'] = df['Start_Time'].dt.weekday
df['Month'] = df['Start_Time'].dt.month

bool_cols = ['Amenity', 'Bump', 'Crossing', 'Give_Way', 'Junction', 'No_Exit',
             'Railway', 'Roundabout', 'Station', 'Stop', 'Traffic_Calming',
             'Traffic_Signal', 'Turning_Loop']

for col in bool_cols:
    if col in df.columns:
        df[col] = df[col].astype(int)

# One-hot encode twilight-related time features if they exist
time_cols = ['Sunrise_Sunset', 'Civil_Twilight', 'Nautical_Twilight', 'Astronomical_Twilight']
available_time_cols = [col for col in time_cols if col in df.columns]

if available_time_cols:
    df = pd.get_dummies(df, columns=available_time_cols, drop_first=True)
else:
    print("No twilight-related time columns found.")

print(df.columns.tolist())

cat_cols = df.select_dtypes(exclude='number').columns

# Initialize LabelEncoder
le = LabelEncoder()

# Apply label encoding to each categorical column
for col in cat_cols:
    df[col] = le.fit_transform(df[col].astype(str))

cat_cols = df.select_dtypes(exclude='number').columns

# Initialize LabelEncoder
le = LabelEncoder()

# Apply label encoding to each categorical column
for col in cat_cols:
    df[col] = le.fit_transform(df[col].astype(str))

X = df.drop(columns=['Severity', 'Start_Time', 'End_Time'])
y = df['Severity']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train = scaler.fit_transform(X_train)
X_test = scaler.transform(X_test)

model = RandomForestClassifier(n_estimators=100, random_state=42)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)
print(confusion_matrix(y_test, y_pred))
print(classification_report(y_test, y_pred))

def predict_severity(Distance, Duration, Hour, Weekday, Month,
                     Amenity, Bump, Crossing, Give_Way, Junction,
                     No_Exit, Railway, Roundabout, Station, Stop,
                     Traffic_Calming, Traffic_Signal, Turning_Loop,
                     SS_Night, CT_Night, NT_Night, AT_Night):
    input_data = np.array([[Distance, Duration, Hour, Weekday, Month,
                            Amenity, Bump, Crossing, Give_Way, Junction,
                            No_Exit, Railway, Roundabout, Station, Stop,
                            Traffic_Calming, Traffic_Signal, Turning_Loop,
                            SS_Night, CT_Night, NT_Night, AT_Night]])
    input_scaled = scaler.transform(input_data)
    prediction = model.predict(input_scaled)
    return f"ðŸš¨ Predicted Severity Level: {int(prediction[0])}"

def predict_severity(*args):
    try:
        # Your prediction logic here
        return "Some predictor"
    except Exception as e:
        return f"Error: {str(e)}"

inputs = [
    gr.Number(label="Distance (miles)"),
    gr.Number(label="Duration (minutes)"),
    gr.Slider(0, 23, label="Hour of Day"),
    gr.Slider(0, 6, label="Day of Week (0=Monday)"),
    gr.Slider(1, 12, label="Month"),
    *[gr.Checkbox(label=col) for col in [
        "Amenity", "Bump", "Crossing", "Give_Way", "Junction",
        "No_Exit", "Railway", "Roundabout", "Station", "Stop",
        "Traffic_Calming", "Traffic_Signal", "Turning_Loop"
    ]],
    *[gr.Checkbox(label=col) for col in [
        "SS_Night", "CT_Night", "NT_Night", "AT_Night"
    ]]
]

output = gr.Textbox(label="Prediction")

gr.Interface(fn=predict_severity, inputs=inputs, outputs=output,
             title="ðŸ§  AI Traffic Accident Severity Predictor",
             description="Enter traffic accident data to predict its severity using AI."
).launch(share=True)